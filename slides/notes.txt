# title:
========

I want to present a messaging queue (or bus) in rust. JohnMQ.

Remark: it is still work in progress and not production ready.  Contributions
are welcome :) Actually I'm looking for a few collaborators.

# story:
========

Why having a high-performance and reliable messaging bus is important?  I will
tell you my story.

# microservices:
================

Microservices.

A relatively new fashionable word in a software development world.  If you
don't know what it is, then you can google it and read an article from Martin
Fowler.

# monolith-vs-micro:
====================

I have been through a bunch of huge monolithic code bases already. It doesn't
feel good and great to work with. Deploy is a pain, bug hunting is a pain, one
tests run takes way too long. And complexity never stops increasing.

Until you start splitting it to a smaller applications (aka, services). And it
turns out to help in reducing this harsh complexity of monolith. Just imagine
dealing with 200 SLOCs instead of 60K SLOCs when trying to find a bug. You can
even rewrite the thing from scratch if you are too lazy to find a bug.

Microservices enable you to deploy them separately and independently. Yes, in
monolithic application you can wonder why this update to admin interface has
brought your entire application down?

But that is not all to it. Turns out you can build SOA in two different ways
(and mix them of course).

# sync-vs-async:
================

First one is the API kind of communication. Every service knows other services
he needs to communicate with. It has increased complexity and coupling.
Basically, no huge difference from monolith.

Second one is the Message Bus kind of communication. Every service doesn't care
about any other services, he knows only his own stuff and issues a bunch of
events when something happens inside of him. And he listens for some specific
events and react accordingly when they happen. It reduces coupling of services
almost down to zero. It is a huge win over monolith.

In real world applications you would mix both types of communication, because
you can't just send all the data to message bus, often you will send some basic
data about event that happened and a link to service API to fetch details of
this event, or associated data for this event.

# rivers-of-data:
=================

This type of communication generates a lot of data in form of events that is
happened. And it is worth to persist this data for some time and not throw away
it once it is processed.

For example, you can replay some situation from production on your developer
laptop simply by copying related events and "replaying" on them suspected
subset of microservices and see how they behave. Without a need to run and
setup special case for services that generate these events!

Logging, monitoring, performance analysis - everything can be done based on
this data. At realtime!

These non-stopping events are basically a flows of data. And you can have
different flows in your application. In JohnMQ they are called Rivers of data.

# kafka:
========


# kafka-details:
================

Seems like the same as what I am trying to build. But it has one annoying
dependency.

# zookeeper:
============

Yes. You need to setup another distributed servers to manage distributed kafka
instances. Seems like a lot of overhead for me. And it is not that easy to
setup, especially in highly isolated environments. For example Docker. And it
is impractically to run it on cloud just to play with. It will not be for free
obviously (because you need to run minimum of 2 jvm services, which will max
out all memory limits on free instances). Try to run it on Heroku for example.

# borrow-idea:
==============

So, tell how it works and why the heck this thing is fast and reliable.

# why-rust:
===========

Because I hate this...

# undefined-nil:
================

(show error message): `NoMethodError (undefined method 'message' for nil:NilClass)`

In production.

And Rust lang is awesome. It type system, ownership system are great and suite my tastes.
Simply, I love it.

# why-raft:
===========

# raft-consensus:
=================

# raft-awesome:
===============

It would be great to have production-ready implementation of Raft in Rust.
There are a bunch of implementations out there (you can find them on github).
But 4 commits and "Experimentation" is just wrong attitude to build something
related to high reliability and consensus.

# raft-rs:
==========

Contributions are welcome. And if someone want to do pair-coding or even
gangbang-coding on it, would be awesome.

# how:
======

How can we implement it right and get it production ready at a good pace?

# your-help:
============

If somebody moved by the idea of this project. You are free to contact me, it
would be great to collaborate on this together (since I totally love
pair-coding and swarming, and it is so boring to do it on myself).

I feel this project, given right amount of effort can bring a lot of benefit to
Rust community. First step is done - it is a Raft library. And I already see
some other libraries in the future, like HTTP, TCP, RPC, integrations with
different cloud providers for Rust, etc. It shouldn't be only libraries created
by this community, but highly possibly as a contribution to other communities
libraries since we will use them.

# tips-tricks:
==============

And now a bonus. Tips and tricks for Rust, that I have already come up with during development of JohnMQ and raft-rs.

# traits:
=========

When building a general purpose libraries you'll often find a need to expose
some kind of abstraction and let users of your library to implement specific
interface to make the library work in their domain. That is what I am doing
while implementing raft-rs. I expose a bunch of public traits for users of my
library to implement.

[click the link]

Intercommunication - abstraction from communication between nodes in
distributed system. It doesn't matter for Raft consensus how communication is
done until it works consistently.

Committable - is the piece of data (a command) you can commit. Basically it is
a first-class object in your consensus. A database transaction, an action in
your domain, log append message in JohnMQ, etc.

Receivable and Queriable - a way to query a current state of distributed
system. If Committable is used to modify state of the system, then these two
used to query this state.

LogPersistance - a way to commit your Committable entries. Again it could
differ for different domains.

ReplicationLog - an abstraction that can hold committed and uncommitted entries
in a form of log, allows to enqueue them, discard when needed and actually do a
commit for them. Additionally it allows you to query current state of a
distributed system (as I look on it, this method does not belong here, so
probably it is subject to have its own public trait).

# 50-to-karma:
==============

#![deny(missing_docs)] - Forces you to document all public things you implement
in your library. So that you can generate documentation out of that and help
your users understand and use your library.

#![deny(warnings)] - Forces you to fix all warnings in your code. It is a good
thing to do. And personally warnings are annoying especially to users of your
library when they are building it.

This stuff really works. It adds +50 to karma. And frequency of trains being
delayed when you want to get somewhere in hurry really drops :)

# avoid-lifetimes:
==================

At least try to do that. It is just my personal advice and I could be wrong.
But whenever compiler starts complain about lifetimes and asks me to explicitly
specify it, I stop and read my code again, and after that I see a better
solution to a problem that is easier to implement, better to read and doesn't
involve lifetimes. Often it does involve parametric types and traits :)

# deriving:
===========

[click the link]
[Basic info about Clone, Show, Send and PartialEq and when it is reasonable to
derive from them and when to accept them as arguments]

# tdd:
======

TDD. During implementing of johnmq I have never ever run a binary until it was
done and was actually working. The same goes for raft-rs.

Start from integration tests that is being put in tests/ folder and proceed
with unit tests when you struggle to implement some module of your library or
system. Or when you unsure how this concrete piece of code will work.

# questions:
============

# thanks:
=========

# links:
========
